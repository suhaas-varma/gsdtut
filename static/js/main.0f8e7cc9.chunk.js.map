{"version":3,"sources":["MovieRow.js","App.js","serviceWorker.js","index.js"],"names":["MovieRow","key","this","props","movie","id","style","backgroundColor","src","poster_src","alt","fontFamily","fontWeight","title","overview","Component","App","performSearch","searchTerm","a","url","$","ajax","success","searchResults","console","log","results","movieRows","forEach","poster_path","movieRow","push","setState","rows","error","xhr","status","err","searchChangeHandler","document","getElementById","value","state","className","type","placeholder","onChange","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"+QAsBeA,G,MApBf,uKAEI,OACE,yBAAKC,IAAKC,KAAKC,MAAMC,MAAMC,IACzB,2BAAOC,MAAO,CAAEC,gBAAiB,YAC/B,4BACE,4BACE,yBAAKC,IAAKN,KAAKC,MAAMC,MAAMK,WAAYC,IAAI,YAE7C,wBAAIJ,MAAO,CAAEK,WAAY,uCACvB,wBAAIL,MAAO,CAAEM,WAAY,SAAWV,KAAKC,MAAMC,MAAMS,OACrD,2BAAIX,KAAKC,MAAMC,MAAMU,kBAXnC,GAA8BC,c,gBCuDfC,E,kDAnDb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IAIRc,cALmB,uCAKH,WAAOC,GAAP,eAAAC,EAAA,6DACRC,EACJ,2FACAF,EAHY,SAIRG,IAAEC,KAAK,CACXF,IAAKA,EACLG,QAAS,SAACC,GACRC,QAAQC,IAAIF,GACZ,IAAMG,EAAUH,EAAcG,QAC1BC,EAAY,GAChBD,EAAQE,SAAQ,SAACzB,GACfA,EAAMK,WACJ,iCAAmCL,EAAM0B,YAC3C,IAAMC,EAAW,kBAAC,EAAD,CAAU9B,IAAKG,EAAMC,GAAID,MAAOA,IACjDwB,EAAUI,KAAKD,MAEjB,EAAKE,SAAS,CAAEC,KAAMN,KAExBO,MAAO,SAACC,EAAKC,EAAQC,GACnBb,QAAQU,MAAM,kBAnBJ,2CALG,wDA4BnBI,oBAAsB,WACpB,IAAMrB,EAAasB,SAASC,eAAe,QAAQC,MACnD,EAAKzB,cAAcC,IA5BnB,EAAKyB,MAAQ,GAFI,E,qDAiCjB,OACE,yBAAKC,UAAU,OACb,gCACE,oCAEF,2BACEC,KAAK,OACLC,YAAY,aACZzC,GAAG,OACH0C,SAAU7C,KAAKqC,sBAEjB,0CACCrC,KAAKyC,MAAMT,U,GA9CFc,IAAMjC,WCOJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhB,SAASC,eAAe,SDyHpB,kBAAmBgB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA5B,GACLV,QAAQU,MAAMA,EAAM6B,c","file":"static/js/main.0f8e7cc9.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport class MovieRow extends Component {\n  render() {\n    return (\n      <div key={this.props.movie.id}>\n        <table style={{ backgroundColor: \"#f4f4f4\" }}>\n          <tr>\n            <td>\n              <img src={this.props.movie.poster_src} alt=\"poster\" />\n            </td>\n            <td style={{ fontFamily: \"Comic Sans MS, Cursive, sans-serif\" }}>\n              <h2 style={{ fontWeight: \"bold\" }}>{this.props.movie.title}</h2>\n              <p>{this.props.movie.overview}</p>\n            </td>\n          </tr>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default MovieRow;\n","import React from \"react\";\nimport \"./App.css\";\nimport MovieRow from \"./MovieRow.js\";\nimport $ from \"jquery\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  performSearch = async (searchTerm) => {\n    const url =\n      \"http://api.themoviedb.org/3/search/movie?api_key=1b5adf76a72a13bad99b8fc0c68cb085&query=\" +\n      searchTerm;\n    await $.ajax({\n      url: url,\n      success: (searchResults) => {\n        console.log(searchResults);\n        const results = searchResults.results;\n        var movieRows = [];\n        results.forEach((movie) => {\n          movie.poster_src =\n            \"http://image.tmdb.org/t/p/w185\" + movie.poster_path;\n          const movieRow = <MovieRow key={movie.id} movie={movie} />;\n          movieRows.push(movieRow);\n        });\n        this.setState({ rows: movieRows });\n      },\n      error: (xhr, status, err) => {\n        console.error(\"failed data\");\n      },\n    });\n  };\n  searchChangeHandler = () => {\n    const searchTerm = document.getElementById(\"name\").value;\n    this.performSearch(searchTerm);\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <h1>GSD</h1>\n        </header>\n        <input\n          type=\"text\"\n          placeholder=\"movie name\"\n          id=\"name\"\n          onChange={this.searchChangeHandler}\n        />\n        <button>submit</button>\n        {this.state.rows}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}